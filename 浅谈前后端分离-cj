前言
  由于之前认识到自己的不足，故而决定努力拾起自己漏掉的。今天决定从前后端分离开始，逐步深入。

1、什么是前后端分离？
  有的人认为这里的前端是与浏览器有关的代码，这里的后端是与服务器有关的逻辑代码；也有的人认为前端是html页面以及后台的jsp模板技术，后台仅仅指的是service层次的技术。我认为，前端后端的划分应该以业务逻辑为准。前端是与页面逻辑有关的部分，后台是与业务逻辑有关的部分。  前端页面上展示的数据叫页面数据，然而这些数据有可能是service分为多个接口返回的，随后需要我们自己对这些后台返回的业务数据进行整理。      前端处理后台返回的业务数据变成页面数据的过程就是前端要做的事儿，后台获取以及持久化业务数据的过程就是后端所涉及部分。
  要理解前后端分离和前后端分工的区别。
2、为什么要前后端分离？
  前后端不分离：后端套用前端的html模板，如果前端模板有问题，再进行修改；
  前后端分离：后端只需要提供API，前端利用ajax调用后台API获取数据，并渲染页面。
  前后端分离并不仅仅是把前端和后台的工作分开。对于从事企业级后台开发的前端开发工作来说，大多数后台应用都是SPA，而SPA最大的优点就是可以自行控制路由调用ajax，而后台只需要提供好接口，加快了网页加载速度，提高网页渲染性能，降低了维护成本。  而前后端不分离的情况下，服务器要单独对web端做处理，然后返回一个完整的html，前端接口一个完整的html，一定程度上影响网页性能，这对于移动端性能为王的需求是不适合的。
  
3、前后端分离的优势？
  1）彻底解放前端
    前端和后端的耦合度大大降低，前端可自行配置路由，工程搭建也不需要依靠服务器环境。前端通过AJAX调用后台接口，数据逻辑放在前端，由前端维护。
  2）提高工作效率，分工更加明确
    前后端分离的工作流程可以使前端只关注前端的事，后台只关心后台的活，两者开发可以同时进行，在后台还没有时间提供接口的时候，前端可以先将数据写死或者调用    本地的json文件即可，页面的增加和路由的修改也不必再去麻烦后台，开发更加灵活。
  3）局部性能提升
    通过前端路由的配置，我们可以实现页面的按需加载，无需一开始加载首页便加载网站的所有的资源，服务器也不再需要解析前端页面，在页面交互及用户体验上有所提    升。
  4）降低维护成本
    通过目前主流的前端MVC框架，我们可以非常快速的定位及发现问题的所在，客户端的问题不再需要后台人员参与及调试，代码重构及可维护性增强。
    
    
 前后端不分离：
 <!--服务器端渲染 -->
<select>
    <option value=''>--请选择所属业务--</option>
    {% for p in p_list %}
    <option value="{{ p }}">{{ p }}</option>
    {% endfor %}
</select>



前后端分离：
<!--前端渲染 -->
<template>
    <select id="rander">
        <option value=''>--请选择所属业务--</option>
        <option v-for="list in lists" :value="list" v-text="list"></option>
    </select>
</template>

<script>
export default {
    data: {
        return {
            lists: ['选项一', '选项二', '选项三', '选项四']
        }
    }，
    ready: function () {
        this.$http({
            url: '/demo/',
            method: 'POST',
        })
        .then(function (response) {
            this.lists = response.data.lists // 获取服务器端数据并渲染
        })
    }
}
</script>



前后端分离，使前端可以随意的编写页面和逻辑，也使模板可以重复使用，从而组件化开发开始流行 ，比如VUE.js 就是一个组件化开发为核心思想的渐进式框架。



